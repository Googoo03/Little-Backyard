// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
RWStructuredBuffer<float3> vertexBuffer;
RWStructuredBuffer<float3> points;


int startSeed = 0;
int seed;
bool inverse;

float scale;

int octaves;
float persistance;
float lacunarity;
float oceanMultiplier;
float landMultiplier;
float seaLevel;


const static int PermOriginal[] = {
            151,160,137,91,90,15,
            131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,
            190, 6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,
            88,237,149,56,87,174,20,125,136,171,168, 68,175,74,165,71,134,139,48,27,166,
            77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,
            102,143,54, 65,25,63,161, 1,216,80,73,209,76,132,187,208, 89,18,169,200,196,
            135,130,116,188,159,86,164,100,109,198,173,186, 3,64,52,217,226,250,124,123,
            5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,
            223,183,170,213,119,248,152, 2,44,154,163, 70,221,153,101,155,167, 43,172,9,
            129,22,39,253, 19,98,108,110,79,113,224,232,178,185, 112,104,218,246,97,228,
            251,34,242,193,238,210,144,12,191,179,162,241, 81,51,145,235,249,14,239,107,
            49,192,214, 31,181,199,106,157,184, 84,204,176,115,121,50,45,127, 4,150,254,
            138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180,
            151,160,137,91,90,15,
            131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,
            190, 6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,
            88,237,149,56,87,174,20,125,136,171,168, 68,175,74,165,71,134,139,48,27,166,
            77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,
            102,143,54, 65,25,63,161, 1,216,80,73,209,76,132,187,208, 89,18,169,200,196,
            135,130,116,188,159,86,164,100,109,198,173,186, 3,64,52,217,226,250,124,123,
            5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,
            223,183,170,213,119,248,152, 2,44,154,163, 70,221,153,101,155,167, 43,172,9,
            129,22,39,253, 19,98,108,110,79,113,224,232,178,185, 112,104,218,246,97,228,
            251,34,242,193,238,210,144,12,191,179,162,241, 81,51,145,235,249,14,239,107,
            49,192,214, 31,181,199,106,157,184, 84,204,176,115,121,50,45,127, 4,150,254,
            138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180
        };

int _permutation[] = PermOriginal;

int Distance(float3 a, float3 b)
{
    float x = b[0] - a[0];
    float y = b[1] - a[1];
    float z = b[2] - a[2];
    return sqrt((x * x) + (y * y) + (z * z));

}

uint PRNG()
{
    //c is the increment, a is the factor, the seed is our starting factor, m is modulus
    uint a = 22695477;
    uint m = 256;
    uint c = 1;
    //if (startSeed == 0) startSeed = seed;
    uint val = ((startSeed * a) + c) % m;
    startSeed = val;
    return val;
}

void setSeedPRNG(int seed)
{
    startSeed = seed;
}

void resetLookUpTable()
{
    for (int i = 0; i < 256; ++i)
    {
        _permutation[i] = PRNG();

    }

}

int FastFloor(float x) //returns the floor of x
{
    return (x > 0) ? ((int) x) : (((int) x) - 1);
}

float Calculate(float3 pos, float scale)
{
            //the scale should make the 1x1x1 cube be smaller accordingly
    float maxDistance = 1.41 / scale;
    //loat3 points[27] = 0;


            //first figure out the 1x1x1 cube the point is situated in
    float xs = (float) (FastFloor(pos[0] * scale) / scale);
    float ys = (float) (FastFloor(pos[1] * scale) / scale);
    float zs = (float) (FastFloor(pos[2] * scale) / scale);

            //create the 27 cube kernel around the point
    for (int i = -1; i < 2; ++i)
    {
        for (int j = -1; j < 2; ++j)
        {
            for (int k = -1; k < 2; ++k)
            {
                int index = ((i + 1) * 3 * 3) + ((j + 1) * 3) + (k + 1); //((3 * i) + j)* k; //this may be a wrong calculation
                points[index] = float3(xs + (i / scale), ys + (j / scale), zs + (k / scale));
            }
        }
    }

            //NEED TO PROPERLY SHIFT THE POINTS BY AN APPROPRIATE VECTOR SUCH THAT 
            //IT IS REPLICABLE AND ENERGY EFFICIENT
            


            //HERE
    for (int index = 0; index < 27; ++index)
    {
                //for each point we want to offset it 
                //such that each input will always give the same output


                //NEED A DIFFERENT METHOD. THIS NO WORK
        uint permutationSize = 256;

        int xx = (int) (points[index][0] * 1000000) % permutationSize;
        int yy = (int) (points[index][1] * 1000000) % permutationSize;
        int zz = (int) (points[index][2] * 1000000) % permutationSize;

        float3 offset = 
        float3(
                _permutation[xx] / 255.0,
                _permutation[(yy + _permutation[xx]) % permutationSize] / 255.0,
                _permutation[(zz + _permutation[(yy + _permutation[xx]) % permutationSize]) % permutationSize] / 255.0
              );
        points[index] += (offset / scale);

    }
            ///////////////

            //compare the point locations with the x,y,z and give a value between -1 and 1 based on it. or perhaps between 0 and 1?
    float closestDistance = 1;
    for (int distIndex = 0; distIndex < 27; ++distIndex)
    {

        float distance = Distance(points[distIndex], pos);
        if (distance < closestDistance)
        {
            closestDistance = distance;
                    
        }

    }
    closestDistance = (closestDistance == 1 ? 1 : 1 - pow(2, -10 * closestDistance));


    float val = closestDistance;
            //val *= multiplier;
    return inverse == true ? 1 - val : val;
}

[numthreads(1,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    int index = (id.x + (id.y * 16) + id.z);
    float3 vertexPos = vertexBuffer[index];

    if (seed != 0)
    {
        setSeedPRNG(seed);
        resetLookUpTable();
        
    }

    //compute noise with octaves 
    float result = 0;
    float amplitude = 1;
    float frequency = 1;
    
    for (int i = 0; i < octaves; ++i)
    {
        result += (Calculate(vertexPos, frequency * scale)) * amplitude;
        amplitude *= persistance;
        frequency *= lacunarity;
    }
    result *= result > seaLevel ? landMultiplier : oceanMultiplier;
    Result[id.xy] += result;
}
