// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
RWStructuredBuffer<float3> vertexBuffer;
RWStructuredBuffer<float3> points;


int startSeed = 0;
int seed;
bool inverse;

int scale;

int octaves;
float persistance;
float lacunarity;
float oceanMultiplier;
float landMultiplier;
float seaLevel;

bool mode; //either add mode or multiply mode
bool edgeDetect;
bool volcano_crater;
float edgeThreshold;

int FastFloor(float x) //returns the floor of x
{
    return (x > 0) ? ((int) x) : (((int) x) - 1);
}

float easeOutCirc(float x)
{
    return sqrt(1 - pow(x - 1, 2));
}

float easeInCirc(float x)
{
    return 1 - sqrt(1 - pow(x, 2));
}

float FindClosest(float3 pos)
{
    
    float closestDistance = 100;
    for (uint distIndex = 0; distIndex < 25; ++distIndex)
    {
        //floating point errors in calculating the distance
        float _distance = distance(points[distIndex], pos);
        if (_distance < closestDistance)
        {
            closestDistance = _distance;
        }
    }
    
    return closestDistance;
}

float QuarticSmooth(float x)
{
    return pow(x, 4);
}

float EaseInOutCubic(float x)
{
    return x < 0.5 ? 4 * x * x * x : 1 - pow(-2 * x + 2, 3) / 2;
}

float FindEdge(float3 pos)
{
    //create second closest and closest vals
    //if within boundary, then edge
    
    float closestDistance = 1000;
    float secondClosest = 1000;
    for (uint distIndex = 0; distIndex < 25; ++distIndex)
    {

        float _distance = distance(points[distIndex], pos);
        //closest is always smallest
        if (_distance < closestDistance)
        {
            
            secondClosest = closestDistance;
            closestDistance = _distance;
        }
        else if (_distance < secondClosest)
        {
            secondClosest = _distance;
        }
        
        
    }
    //FIGURE OUT NEW WAY TO COMPUTE THE SECOND AND FIRST DISTANCE
    float difference = secondClosest - closestDistance;
    bool edge = (difference < edgeThreshold);
    float value = (edge) ? EaseInOutCubic((edgeThreshold-difference)/edgeThreshold) : 0;
    return value;
}


float Calculate(float3 pos, float scale)
{
    float3 n = float3( (int) pos.x, (int) pos.y, (int) pos.z);
    float s = 1.0 / scale;
    n += float3(s,s,s);
    
    return distance(pos, n);
}



[numthreads(1,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    
    
    uint index = (id.x + (id.y * 16) + id.z);
    float3 vertexPos = vertexBuffer[index];

    //compute noise with octaves 
    float result = 0;
    float amplitude = 1;
    float frequency = 1;
    
    
    
    //replace the .8 later. It represents the sealevel 0-1
    if (!edgeDetect)
    {
        //standard craters
        result = FindClosest(vertexPos) * amplitude;
        result = (result > 1) ? 1 : result;
        if (volcano_crater)
        {
            result = (result < seaLevel) ? easeInCirc((seaLevel - result) / seaLevel) : 0;
        }
        else
        {
            
            result = (result < seaLevel) ? 1 - easeOutCirc((seaLevel - result) / seaLevel) : 1;
        }
    }
    else
    {
        result = FindEdge(vertexPos) * amplitude;
    }
    
    if (mode)
    {
        //mulitply mode, mode = 1
        Result[id.xy] *= (inverse == true) ? 1.0 - result : result;
    }
    else
    {
        //add mode, mode = 0
        Result[id.xy] += (inverse == true) ? 1.0 - result : result;
    }
}
