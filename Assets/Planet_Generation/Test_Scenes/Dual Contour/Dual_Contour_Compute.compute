// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

RWTexture2D<float4> SimplexTex;

RWStructuredBuffer<float3> vertexBuffer;
RWStructuredBuffer<int> dualGrid;
RWStructuredBuffer<uint> indices;
float3 global;
float3 dimensions;
int LOD_Level = 0;
float CELL_SIZE;
bool block_voxel;

float3 step;
float3 offset;

groupshared int vertIndex = 0;


inline float adapt(float x0, float x1){    return x1 == x0 ? 0 : (-x0) / (x1 - x0);}

float3 Grid(float3 pos, int elevation) { return pos;}

float function(float3 pos, float elevation, int3 index)
{
    if (elevation >= (float)dimensions.y - 1)
    {
        return -1;
    }
    if (elevation <= 1)
    {
        return 1;
    }

    float Ground = dimensions.y / 2;
    float amplitude = 10;
    
    float3 newInd = float3(pos.x / step.x, 0, pos.z / step.z);

    float value = Ground - elevation + (1.0 - abs((SimplexTex[newInd.xz].r))) * amplitude;

    return value;
}

void Find_Best_Vertex(int x, int y, int z)
{

            //We have 8 vertices, and need to store them for later use
    float3 pos = offset + float3(x * step.x, y * step.y, z * step.z);

    float vertValues[8];
    float3 vertPos[8];
    int i = 0;
    for (; i < 8; ++i)
    {
        vertPos[i] = Grid(pos + float3(step.x * ((i >> 2) & 0x01), step.y * ((i >> 1) & 0x01), step.z * (i & 0x01)), y + ((i & 2) == 2 ? 1 : 0));
        
        //beware the function calls for an int3 but vertpos is a float
        vertValues[i] = function(vertPos[i], y + ((i & 2) == 2 ? 1 : 0), int3(x,y,z));
    }
            //calculate the adapt of only the edges that cross, rather than the whole thing
            //calculate the positions of the edges itself


    //set sign change if any edge is crossed
    int signChange = false;
    bool xCross;

    bool yCross;

    bool zCross;
    
    signChange |= (vertValues[0] > 0) != (vertValues[4] > 0);
    signChange |= (vertValues[0] > 0) != (vertValues[1] > 0);
    signChange |= (vertValues[5] > 0) != (vertValues[1] > 0);
    signChange |= (vertValues[5] > 0) != (vertValues[4] > 0);
    signChange |= (vertValues[4] > 0) != (vertValues[6] > 0);
    signChange |= (vertValues[1] > 0) != (vertValues[3] > 0);
    signChange |= (vertValues[0] > 0) != (vertValues[2] > 0);
    signChange |= yCross = (vertValues[5] > 0) != (vertValues[7] > 0);
    signChange |= xCross = (vertValues[6] > 0) != (vertValues[7] > 0);
    signChange |= zCross = (vertValues[3] > 0) != (vertValues[7] > 0);
    signChange |= (vertValues[2] > 0) != (vertValues[3] > 0);
    signChange |= (vertValues[2] > 0) != (vertValues[6] > 0);

    if (!signChange)
        return;
    
    
    float3 avg = float3(0, 0, 0);
    int count = 0;

            //X EDGES NEW 
    for (i = 0; i < 4; ++i)
    {
        float a = vertValues[i];
        float b = vertValues[i | 0x04];
        if (a > 0 != b > 0)
        {
            avg += vertPos[i] + adapt(a, b) * (vertPos[i | 0x04] - vertPos[i]);
            count++;
        }
    }

            //Y EDGES
    int yindices[] = {0, 1, 4, 5};
    
    for (i = 0; i < 4; ++i)
    {
        int j = yindices[i];
        float a = vertValues[j];
        float b = vertValues[j | 0x02];
        if (a > 0 != b > 0)
        {
            avg += vertPos[j] + adapt(a, b) * (vertPos[j | 0x02] - vertPos[j]);
            count++;
        }
    }

            //Z EDGES
    for (i = 0; i < 4; ++i)
    {
        float a = vertValues[(i << 1)];
        float b = vertValues[(i << 1) | 0x01];
        if (a > 0 != b > 0)
        {
            avg += vertPos[i << 1] + adapt(a, b) * (vertPos[(i << 1) | 0x01] - vertPos[i << 1]);
            count++;
        }
    }

    avg /= count > 1 ? count : 1;

            //figure out what edge was crossed (axis)

            //Assign the sign of the edge according to how the flip occurs

            //The normals shouldn't have x,y,z as their parameters, but should instead reflect
            //the positions of the intermediate point on the edge.
    int newedge = 0;
    
    
    if (xCross)
    {
        newedge |= 1 << 5;
        newedge |= ((vertValues[6] > 0) && !(vertValues[7] > 0)) << 4;
    }
    if (yCross)
    {
        newedge |= 1 << 3;
        newedge |= (!(vertValues[5] > 0) && (vertValues[7] > 0)) << 2;
    }
    if (zCross)
    {
        newedge |= 1 << 1;
        newedge |= ((vertValues[3] > 0) && !(vertValues[7] > 0));
    }

    float3 vertex = block_voxel ? vertPos[0] : avg;
    //float3 vertex = vertPos[0];

    int oldIndex = vertIndex;
    InterlockedAdd(vertIndex,1,oldIndex);
    //oldIndex++;
    //oldIndex = max(oldIndex, 0);
    //oldIndex = min(dimensions.x * dimensions.y * dimensions.z, oldIndex);
    uint index = (uint) (x + dimensions.x * (y + dimensions.y * z));
    
    
    dualGrid[index] = (newedge | ((oldIndex) << 6));
    vertexBuffer[oldIndex] = vertex;

}

[numthreads(4,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID, uint3 gid : SV_GroupThreadID)
{
    // TODO: insert actual code here!
    
    //determines the "step" between vertices to cover 1 unit total
    step = float3(1.0 / (dimensions.x), 1.0 / (dimensions.y), 1.0 / (dimensions.z));
    step *= (1.0 / (1 << LOD_Level));
    step *= CELL_SIZE;
                

    //sets the offset of the grid by a power of two based on the LOD level
    float3 offset = float3(-1, -1, -1) * (1.0 / (1 << (LOD_Level + 1))) * (CELL_SIZE);
    
    
    //start index
    int3 s_index = int3(ceil(dimensions.x / 4.0) * gid.x, 0, 0);
    int3 e_index = int3((ceil(dimensions.x / 4.0) * (gid.x + 1)), dimensions.y, dimensions.z);
    //Compute starting and ending indices here

    //Compute vertex positions
    for (int x = s_index.x; x < e_index.x; ++x)
    {
        for (int y = s_index.y; y < e_index.y; ++y)
        {
            for (int z = s_index.z; z < e_index.z; ++z)
            {
                dualGrid[(x + dimensions.x * (y + dimensions.y * z))] = -1;
                Find_Best_Vertex(x, y, z);
            }
        }
    }
}
